[project]
name = "lib_sandbox_001"
description = "Lib Sandbox 001"
authors = [{name = "Matheus Felipe Gremes", email = "matheusfelipegremes@gmail.com"}]
requires-python = ">=3.8"
classifiers = [
  "Environment :: GPU",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Image Processing",
]
dynamic = [
  "dependencies",
  "optional-dependencies",
  "readme",
  "version",
]

[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=61.2",
]

[tool.setuptools]
  zip-safe = true
  include-package-data = false

  [tool.setuptools.dynamic]
    dependencies = {file = ["requirements/requirements.txt"]}
    version = {attr = "lib_sandbox_001.__version__"}
    readme = {file = ["README.md"], content-type = "text/markdown"}

  [tool.setuptools.dynamic.optional-dependencies]
    dev = {file = "requirements/requirements-dev.txt"}

  [tool.setuptools.package-dir]
    lib_sandbox_001 = "src/lib_sandbox_001"

[tool.distutils.bdist_wheel]
  universal = true


[tool.ruff]
  line-length = 128
  target-version = "py38"
  select = [
    "AIR",    # Airflow
    "ASYNC",  # flake8-async
    "BLE",    # flake8-blind-except
    "C4",     # flake8-comprehensions
    "C90",    # McCabe cyclomatic complexity
    # "CPY",  # Copyright-related rules
    "DTZ",    # flake8-datetimez
    "E",      # pycodestyle
    "F",      # Pyflakes
    "FLY",    # flynt
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "INT",    # flake8-gettext
    "NPY",    # NumPy-specific rules
    "PL",     # Pylint
    "PYI",    # flake8-pyi
    "RSE",    # flake8-raise
    "RUF",    # Ruff-specific rules
    "S",      # flake8-bandit
    "SLOT",   # flake8-slots
    "T10",    # flake8-debugger
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "W",      # pycodestyle
    "YTT",    # flake8-2020
    # "A",    # flake8-builtins
    # "ANN",  # flake8-annotations
    "ARG",    # flake8-unused-arguments
    "B",      # flake8-bugbear
    # "COM",  # flake8-commas
    "D",      # pydocstyle
    # "DJ",   # flake8-django
    "EM",     # flake8-errmsg
    # "ERA",  # eradicate
    # "EXE",  # flake8-executable
    "FA",     # flake8-future-annotations
    "FBT",    # flake8-boolean-trap
    # "FIX",  # flake8-fixme
    "G",      # flake8-logging-format
    # "INP",  # flake8-no-pep420
    "ISC",    # flake8-implicit-str-concat
    # "N",    # pep8-naming
    # "PD",   # pandas-vet
    # "PERF", # Perflint
    "PGH",    # pygrep-hooks
    # "PIE",  # flake8-pie
    "PT",     # flake8-pytest-style
    # "PTH",  # flake8-use-pathlib
    # "Q",    # flake8-quotes
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    # "SLF",  # flake8-self
    # "T20",  # flake8-print
    "TCH",    # flake8-type-checking
    "TD",     # flake8-todos
    # "TRY",  # tryceratops
  ]
  ignore = ["TD003"]

  [tool.ruff.format]
    quote-style = "single"
    skip-magic-trailing-comma = false

  [tool.ruff.isort]
    known-first-party = ["tests", "testing"]
    split-on-trailing-comma = true
    required-imports = ["from __future__ import annotations"]


  [tool.ruff.pylint]
    max-args = 5  # Recommended: 5
    max-branches = 12 # Recommended: 12
    max-returns = 6  # Recommended: 6
    max-statements = 50  # Recommended: 50

  [tool.ruff.lint.pydocstyle]
    convention = "numpy"

  [tool.ruff.per-file-ignores]
    "tests/*" = ["S101", "D"] # allow assert, ignore missing docs
    "testing/*" = ["S101", "D"] # allow assert, ignore missing docs
    "__init__.py" = ["D", "F401"] # Ignore docstring, allow unused import****


[tool.coverage.run]
  plugins = ["covdefaults"]
  source = ["src/lib_sandbox_001/"]

[tool.mypy]
  check_untyped_defs = true
  disallow_any_generics = true
  no_implicit_optional = true
  warn_redundant_casts = true
  warn_unused_ignores = true

[[tool.mypy.overrides]]
  module = "tests.*,testing.*"
  disallow_incomplete_defs = false
  disallow_untyped_defs = false

[[tool.mypy.overrides]]
  module = "loguru.*"
  ignore_missing_imports = true
